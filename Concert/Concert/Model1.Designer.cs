//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("ConcertModel", "FK_AlbumTrack", "albumset", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Concert.albumset), "trackset", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Concert.trackset), true)]
[assembly: EdmRelationshipAttribute("ConcertModel", "FK_BandAlbum", "bandset", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Concert.bandset), "albumset", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Concert.albumset), true)]
[assembly: EdmRelationshipAttribute("ConcertModel", "FK_ArtistBandArtist", "artistset", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Concert.artistset), "bandartistset", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Concert.bandartistset), true)]
[assembly: EdmRelationshipAttribute("ConcertModel", "FK_BandBandArtist", "bandset", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Concert.bandset), "bandartistset", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Concert.bandartistset), true)]
[assembly: EdmRelationshipAttribute("ConcertModel", "FK_BandConcertBand", "bandset", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Concert.bandset), "concertbandset1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Concert.concertbandset1), true)]
[assembly: EdmRelationshipAttribute("ConcertModel", "FK_ConcertConcertBand", "concertset", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Concert.concertset), "concertbandset1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Concert.concertbandset1), true)]
[assembly: EdmRelationshipAttribute("ConcertModel", "FK_LocationConcert", "locationset", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Concert.locationset), "concertset", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Concert.concertset), true)]
[assembly: EdmRelationshipAttribute("ConcertModel", "FK_CountryLocation", "countryset", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Concert.countryset), "locationset", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Concert.locationset), true)]

#endregion

namespace Concert
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class ConcertEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new ConcertEntities object using the connection string found in the 'ConcertEntities' section of the application configuration file.
        /// </summary>
        public ConcertEntities() : base("name=ConcertEntities", "ConcertEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ConcertEntities object.
        /// </summary>
        public ConcertEntities(string connectionString) : base(connectionString, "ConcertEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ConcertEntities object.
        /// </summary>
        public ConcertEntities(EntityConnection connection) : base(connection, "ConcertEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<albumset> albumset
        {
            get
            {
                if ((_albumset == null))
                {
                    _albumset = base.CreateObjectSet<albumset>("albumset");
                }
                return _albumset;
            }
        }
        private ObjectSet<albumset> _albumset;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<artistset> artistset
        {
            get
            {
                if ((_artistset == null))
                {
                    _artistset = base.CreateObjectSet<artistset>("artistset");
                }
                return _artistset;
            }
        }
        private ObjectSet<artistset> _artistset;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<bandartistset> bandartistset
        {
            get
            {
                if ((_bandartistset == null))
                {
                    _bandartistset = base.CreateObjectSet<bandartistset>("bandartistset");
                }
                return _bandartistset;
            }
        }
        private ObjectSet<bandartistset> _bandartistset;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<bandset> bandset
        {
            get
            {
                if ((_bandset == null))
                {
                    _bandset = base.CreateObjectSet<bandset>("bandset");
                }
                return _bandset;
            }
        }
        private ObjectSet<bandset> _bandset;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<concertbandset1> concertbandset1
        {
            get
            {
                if ((_concertbandset1 == null))
                {
                    _concertbandset1 = base.CreateObjectSet<concertbandset1>("concertbandset1");
                }
                return _concertbandset1;
            }
        }
        private ObjectSet<concertbandset1> _concertbandset1;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<concertset> concertset
        {
            get
            {
                if ((_concertset == null))
                {
                    _concertset = base.CreateObjectSet<concertset>("concertset");
                }
                return _concertset;
            }
        }
        private ObjectSet<concertset> _concertset;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<countryset> countryset
        {
            get
            {
                if ((_countryset == null))
                {
                    _countryset = base.CreateObjectSet<countryset>("countryset");
                }
                return _countryset;
            }
        }
        private ObjectSet<countryset> _countryset;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<locationset> locationset
        {
            get
            {
                if ((_locationset == null))
                {
                    _locationset = base.CreateObjectSet<locationset>("locationset");
                }
                return _locationset;
            }
        }
        private ObjectSet<locationset> _locationset;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<trackset> trackset
        {
            get
            {
                if ((_trackset == null))
                {
                    _trackset = base.CreateObjectSet<trackset>("trackset");
                }
                return _trackset;
            }
        }
        private ObjectSet<trackset> _trackset;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the albumset EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToalbumset(albumset albumset)
        {
            base.AddObject("albumset", albumset);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the artistset EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToartistset(artistset artistset)
        {
            base.AddObject("artistset", artistset);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the bandartistset EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTobandartistset(bandartistset bandartistset)
        {
            base.AddObject("bandartistset", bandartistset);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the bandset EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTobandset(bandset bandset)
        {
            base.AddObject("bandset", bandset);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the concertbandset1 EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToconcertbandset1(concertbandset1 concertbandset1)
        {
            base.AddObject("concertbandset1", concertbandset1);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the concertset EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToconcertset(concertset concertset)
        {
            base.AddObject("concertset", concertset);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the countryset EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTocountryset(countryset countryset)
        {
            base.AddObject("countryset", countryset);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the locationset EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTolocationset(locationset locationset)
        {
            base.AddObject("locationset", locationset);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the trackset EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTotrackset(trackset trackset)
        {
            base.AddObject("trackset", trackset);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ConcertModel", Name="albumset")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class albumset : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new albumset object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="band_Id">Initial value of the Band_Id property.</param>
        public static albumset Createalbumset(global::System.Int32 id, global::System.String name, global::System.Int32 band_Id)
        {
            albumset albumset = new albumset();
            albumset.Id = id;
            albumset.Name = name;
            albumset.Band_Id = band_Id;
            return albumset;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Band_Id
        {
            get
            {
                return _Band_Id;
            }
            set
            {
                OnBand_IdChanging(value);
                ReportPropertyChanging("Band_Id");
                _Band_Id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Band_Id");
                OnBand_IdChanged();
            }
        }
        private global::System.Int32 _Band_Id;
        partial void OnBand_IdChanging(global::System.Int32 value);
        partial void OnBand_IdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ConcertModel", "FK_AlbumTrack", "trackset")]
        public EntityCollection<trackset> trackset
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<trackset>("ConcertModel.FK_AlbumTrack", "trackset");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<trackset>("ConcertModel.FK_AlbumTrack", "trackset", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ConcertModel", "FK_BandAlbum", "bandset")]
        public bandset bandset
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bandset>("ConcertModel.FK_BandAlbum", "bandset").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bandset>("ConcertModel.FK_BandAlbum", "bandset").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<bandset> bandsetReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bandset>("ConcertModel.FK_BandAlbum", "bandset");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<bandset>("ConcertModel.FK_BandAlbum", "bandset", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ConcertModel", Name="artistset")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class artistset : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new artistset object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="firstName">Initial value of the FirstName property.</param>
        /// <param name="lastName">Initial value of the LastName property.</param>
        /// <param name="birthDate">Initial value of the BirthDate property.</param>
        public static artistset Createartistset(global::System.Int32 id, global::System.String firstName, global::System.String lastName, global::System.DateTime birthDate)
        {
            artistset artistset = new artistset();
            artistset.Id = id;
            artistset.FirstName = firstName;
            artistset.LastName = lastName;
            artistset.BirthDate = birthDate;
            return artistset;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime BirthDate
        {
            get
            {
                return _BirthDate;
            }
            set
            {
                OnBirthDateChanging(value);
                ReportPropertyChanging("BirthDate");
                _BirthDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BirthDate");
                OnBirthDateChanged();
            }
        }
        private global::System.DateTime _BirthDate;
        partial void OnBirthDateChanging(global::System.DateTime value);
        partial void OnBirthDateChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ConcertModel", "FK_ArtistBandArtist", "bandartistset")]
        public EntityCollection<bandartistset> bandartistset
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<bandartistset>("ConcertModel.FK_ArtistBandArtist", "bandartistset");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<bandartistset>("ConcertModel.FK_ArtistBandArtist", "bandartistset", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ConcertModel", Name="bandartistset")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class bandartistset : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new bandartistset object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="band_Id">Initial value of the Band_Id property.</param>
        /// <param name="artist_Id">Initial value of the Artist_Id property.</param>
        public static bandartistset Createbandartistset(global::System.Int32 id, global::System.Int32 band_Id, global::System.Int32 artist_Id)
        {
            bandartistset bandartistset = new bandartistset();
            bandartistset.Id = id;
            bandartistset.Band_Id = band_Id;
            bandartistset.Artist_Id = artist_Id;
            return bandartistset;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Band_Id
        {
            get
            {
                return _Band_Id;
            }
            set
            {
                OnBand_IdChanging(value);
                ReportPropertyChanging("Band_Id");
                _Band_Id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Band_Id");
                OnBand_IdChanged();
            }
        }
        private global::System.Int32 _Band_Id;
        partial void OnBand_IdChanging(global::System.Int32 value);
        partial void OnBand_IdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Artist_Id
        {
            get
            {
                return _Artist_Id;
            }
            set
            {
                OnArtist_IdChanging(value);
                ReportPropertyChanging("Artist_Id");
                _Artist_Id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Artist_Id");
                OnArtist_IdChanged();
            }
        }
        private global::System.Int32 _Artist_Id;
        partial void OnArtist_IdChanging(global::System.Int32 value);
        partial void OnArtist_IdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ConcertModel", "FK_ArtistBandArtist", "artistset")]
        public artistset artistset
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<artistset>("ConcertModel.FK_ArtistBandArtist", "artistset").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<artistset>("ConcertModel.FK_ArtistBandArtist", "artistset").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<artistset> artistsetReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<artistset>("ConcertModel.FK_ArtistBandArtist", "artistset");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<artistset>("ConcertModel.FK_ArtistBandArtist", "artistset", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ConcertModel", "FK_BandBandArtist", "bandset")]
        public bandset bandset
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bandset>("ConcertModel.FK_BandBandArtist", "bandset").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bandset>("ConcertModel.FK_BandBandArtist", "bandset").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<bandset> bandsetReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bandset>("ConcertModel.FK_BandBandArtist", "bandset");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<bandset>("ConcertModel.FK_BandBandArtist", "bandset", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ConcertModel", Name="bandset")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class bandset : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new bandset object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static bandset Createbandset(global::System.Int32 id, global::System.String name)
        {
            bandset bandset = new bandset();
            bandset.Id = id;
            bandset.Name = name;
            return bandset;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ConcertModel", "FK_BandAlbum", "albumset")]
        public EntityCollection<albumset> albumset
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<albumset>("ConcertModel.FK_BandAlbum", "albumset");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<albumset>("ConcertModel.FK_BandAlbum", "albumset", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ConcertModel", "FK_BandBandArtist", "bandartistset")]
        public EntityCollection<bandartistset> bandartistset
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<bandartistset>("ConcertModel.FK_BandBandArtist", "bandartistset");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<bandartistset>("ConcertModel.FK_BandBandArtist", "bandartistset", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ConcertModel", "FK_BandConcertBand", "concertbandset1")]
        public EntityCollection<concertbandset1> concertbandset1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<concertbandset1>("ConcertModel.FK_BandConcertBand", "concertbandset1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<concertbandset1>("ConcertModel.FK_BandConcertBand", "concertbandset1", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ConcertModel", Name="concertbandset1")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class concertbandset1 : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new concertbandset1 object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="concert_Id">Initial value of the Concert_Id property.</param>
        /// <param name="band_Id">Initial value of the Band_Id property.</param>
        public static concertbandset1 Createconcertbandset1(global::System.Int32 id, global::System.Int32 concert_Id, global::System.Int32 band_Id)
        {
            concertbandset1 concertbandset1 = new concertbandset1();
            concertbandset1.Id = id;
            concertbandset1.Concert_Id = concert_Id;
            concertbandset1.Band_Id = band_Id;
            return concertbandset1;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Concert_Id
        {
            get
            {
                return _Concert_Id;
            }
            set
            {
                OnConcert_IdChanging(value);
                ReportPropertyChanging("Concert_Id");
                _Concert_Id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Concert_Id");
                OnConcert_IdChanged();
            }
        }
        private global::System.Int32 _Concert_Id;
        partial void OnConcert_IdChanging(global::System.Int32 value);
        partial void OnConcert_IdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Band_Id
        {
            get
            {
                return _Band_Id;
            }
            set
            {
                OnBand_IdChanging(value);
                ReportPropertyChanging("Band_Id");
                _Band_Id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Band_Id");
                OnBand_IdChanged();
            }
        }
        private global::System.Int32 _Band_Id;
        partial void OnBand_IdChanging(global::System.Int32 value);
        partial void OnBand_IdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ConcertModel", "FK_BandConcertBand", "bandset")]
        public bandset bandset
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bandset>("ConcertModel.FK_BandConcertBand", "bandset").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bandset>("ConcertModel.FK_BandConcertBand", "bandset").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<bandset> bandsetReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bandset>("ConcertModel.FK_BandConcertBand", "bandset");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<bandset>("ConcertModel.FK_BandConcertBand", "bandset", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ConcertModel", "FK_ConcertConcertBand", "concertset")]
        public concertset concertset
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<concertset>("ConcertModel.FK_ConcertConcertBand", "concertset").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<concertset>("ConcertModel.FK_ConcertConcertBand", "concertset").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<concertset> concertsetReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<concertset>("ConcertModel.FK_ConcertConcertBand", "concertset");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<concertset>("ConcertModel.FK_ConcertConcertBand", "concertset", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ConcertModel", Name="concertset")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class concertset : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new concertset object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="ticketPrice">Initial value of the TicketPrice property.</param>
        /// <param name="date">Initial value of the Date property.</param>
        /// <param name="location_Id">Initial value of the Location_Id property.</param>
        public static concertset Createconcertset(global::System.Int32 id, global::System.String name, global::System.Int32 ticketPrice, global::System.DateTime date, global::System.Int32 location_Id)
        {
            concertset concertset = new concertset();
            concertset.Id = id;
            concertset.Name = name;
            concertset.TicketPrice = ticketPrice;
            concertset.Date = date;
            concertset.Location_Id = location_Id;
            return concertset;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TicketPrice
        {
            get
            {
                return _TicketPrice;
            }
            set
            {
                OnTicketPriceChanging(value);
                ReportPropertyChanging("TicketPrice");
                _TicketPrice = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TicketPrice");
                OnTicketPriceChanged();
            }
        }
        private global::System.Int32 _TicketPrice;
        partial void OnTicketPriceChanging(global::System.Int32 value);
        partial void OnTicketPriceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Location_Id
        {
            get
            {
                return _Location_Id;
            }
            set
            {
                OnLocation_IdChanging(value);
                ReportPropertyChanging("Location_Id");
                _Location_Id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Location_Id");
                OnLocation_IdChanged();
            }
        }
        private global::System.Int32 _Location_Id;
        partial void OnLocation_IdChanging(global::System.Int32 value);
        partial void OnLocation_IdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ConcertModel", "FK_ConcertConcertBand", "concertbandset1")]
        public EntityCollection<concertbandset1> concertbandset1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<concertbandset1>("ConcertModel.FK_ConcertConcertBand", "concertbandset1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<concertbandset1>("ConcertModel.FK_ConcertConcertBand", "concertbandset1", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ConcertModel", "FK_LocationConcert", "locationset")]
        public locationset locationset
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<locationset>("ConcertModel.FK_LocationConcert", "locationset").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<locationset>("ConcertModel.FK_LocationConcert", "locationset").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<locationset> locationsetReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<locationset>("ConcertModel.FK_LocationConcert", "locationset");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<locationset>("ConcertModel.FK_LocationConcert", "locationset", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ConcertModel", Name="countryset")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class countryset : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new countryset object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static countryset Createcountryset(global::System.Int32 id, global::System.String name)
        {
            countryset countryset = new countryset();
            countryset.Id = id;
            countryset.Name = name;
            return countryset;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ConcertModel", "FK_CountryLocation", "locationset")]
        public EntityCollection<locationset> locationset
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<locationset>("ConcertModel.FK_CountryLocation", "locationset");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<locationset>("ConcertModel.FK_CountryLocation", "locationset", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ConcertModel", Name="locationset")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class locationset : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new locationset object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="address">Initial value of the Address property.</param>
        /// <param name="seatCount">Initial value of the SeatCount property.</param>
        /// <param name="country_Id">Initial value of the Country_Id property.</param>
        public static locationset Createlocationset(global::System.Int32 id, global::System.String address, global::System.Int32 seatCount, global::System.Int32 country_Id)
        {
            locationset locationset = new locationset();
            locationset.Id = id;
            locationset.Address = address;
            locationset.SeatCount = seatCount;
            locationset.Country_Id = country_Id;
            return locationset;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SeatCount
        {
            get
            {
                return _SeatCount;
            }
            set
            {
                OnSeatCountChanging(value);
                ReportPropertyChanging("SeatCount");
                _SeatCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SeatCount");
                OnSeatCountChanged();
            }
        }
        private global::System.Int32 _SeatCount;
        partial void OnSeatCountChanging(global::System.Int32 value);
        partial void OnSeatCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Country_Id
        {
            get
            {
                return _Country_Id;
            }
            set
            {
                OnCountry_IdChanging(value);
                ReportPropertyChanging("Country_Id");
                _Country_Id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Country_Id");
                OnCountry_IdChanged();
            }
        }
        private global::System.Int32 _Country_Id;
        partial void OnCountry_IdChanging(global::System.Int32 value);
        partial void OnCountry_IdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ConcertModel", "FK_LocationConcert", "concertset")]
        public EntityCollection<concertset> concertset
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<concertset>("ConcertModel.FK_LocationConcert", "concertset");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<concertset>("ConcertModel.FK_LocationConcert", "concertset", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ConcertModel", "FK_CountryLocation", "countryset")]
        public countryset countryset
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<countryset>("ConcertModel.FK_CountryLocation", "countryset").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<countryset>("ConcertModel.FK_CountryLocation", "countryset").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<countryset> countrysetReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<countryset>("ConcertModel.FK_CountryLocation", "countryset");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<countryset>("ConcertModel.FK_CountryLocation", "countryset", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ConcertModel", Name="trackset")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class trackset : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new trackset object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="length">Initial value of the Length property.</param>
        /// <param name="album_Id">Initial value of the Album_Id property.</param>
        public static trackset Createtrackset(global::System.Int32 id, global::System.String name, global::System.Int32 length, global::System.Int32 album_Id)
        {
            trackset trackset = new trackset();
            trackset.Id = id;
            trackset.Name = name;
            trackset.Length = length;
            trackset.Album_Id = album_Id;
            return trackset;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Length
        {
            get
            {
                return _Length;
            }
            set
            {
                OnLengthChanging(value);
                ReportPropertyChanging("Length");
                _Length = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Length");
                OnLengthChanged();
            }
        }
        private global::System.Int32 _Length;
        partial void OnLengthChanging(global::System.Int32 value);
        partial void OnLengthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Album_Id
        {
            get
            {
                return _Album_Id;
            }
            set
            {
                OnAlbum_IdChanging(value);
                ReportPropertyChanging("Album_Id");
                _Album_Id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Album_Id");
                OnAlbum_IdChanged();
            }
        }
        private global::System.Int32 _Album_Id;
        partial void OnAlbum_IdChanging(global::System.Int32 value);
        partial void OnAlbum_IdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ConcertModel", "FK_AlbumTrack", "albumset")]
        public albumset albumset
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<albumset>("ConcertModel.FK_AlbumTrack", "albumset").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<albumset>("ConcertModel.FK_AlbumTrack", "albumset").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<albumset> albumsetReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<albumset>("ConcertModel.FK_AlbumTrack", "albumset");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<albumset>("ConcertModel.FK_AlbumTrack", "albumset", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
